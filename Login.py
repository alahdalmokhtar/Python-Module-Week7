# Form implementation generated from reading ui file 'my_project.ui'
#
# Created by: PyQt6 UI code generator 6.9.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_logic(object):
    def setupUi(self, logic):
        logic.setObjectName("logic")
        logic.resize(616, 450)
        logic.setMinimumSize(QtCore.QSize(9, 7))
        font = QtGui.QFont()
        font.setFamily("Scheherazade")
        font.setPointSize(12)
        logic.setFont(font)
        logic.setMouseTracking(True)
        logic.setTabletTracking(True)
        logic.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        logic.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        logic.setAcceptDrops(True)
        logic.setStatusTip("")
        logic.setStyleSheet("background-color: qlineargradient(spread:pad, x1:1, y1:0.863636, x2:0, y2:0, stop:0 rgba(0, 0, 0, 255), stop:0.5 rgba(118, 118, 118, 255));")
        logic.setWindowFilePath("")
        self.pushButton = QtWidgets.QPushButton(parent=logic)
        self.pushButton.setGeometry(QtCore.QRect(220, 280, 121, 35))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        font.setBold(True)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("color: rgb(255, 0, 0);\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(59, 102, 140, 175), stop:1 rgba(255, 255, 255, 255));")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(parent=logic)
        self.pushButton_2.setGeometry(QtCore.QRect(470, 400, 71, 31))
        self.pushButton_2.setStyleSheet("font: 600 10pt \"Segoe UI\";\n"
"background-color: qlineargradient(spread:pad, x1:0.25, y1:0, x2:1, y2:1, stop:0 rgba(242, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));")
        self.pushButton_2.setObjectName("pushButton_2")
        self.lineEdit = QtWidgets.QLineEdit(parent=logic)
        self.lineEdit.setGeometry(QtCore.QRect(300, 160, 181, 31))
        self.lineEdit.setStyleSheet("font: 75 11pt \"Miriam Mono CLM\";\n"
"background-color: rgb(255, 255, 255);")
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(parent=logic)
        self.lineEdit_2.setGeometry(QtCore.QRect(300, 210, 181, 31))
        self.lineEdit_2.setStyleSheet("font: 75 11pt \"Miriam Mono CLM\";\n"
"background-color: rgb(255, 255, 255);")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.textEdit = QtWidgets.QTextEdit(parent=logic)
        self.textEdit.setGeometry(QtCore.QRect(90, 160, 151, 31))
        self.textEdit.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.CursorShape.SizeFDiagCursor))
        self.textEdit.setTabletTracking(True)
        self.textEdit.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.textEdit.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.textEdit.setStyleSheet("font: 700 10pt \"Tahoma\";\n"
"\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(59, 102, 140, 175), stop:1 rgba(255, 255, 255, 255));")
        self.textEdit.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        self.textEdit.setTabChangesFocus(True)
        self.textEdit.setLineWrapMode(QtWidgets.QTextEdit.LineWrapMode.NoWrap)
        self.textEdit.setObjectName("textEdit")
        self.label = QtWidgets.QLabel(parent=logic)
        self.label.setEnabled(True)
        self.label.setGeometry(QtCore.QRect(70, 10, 481, 131))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        font.setBold(True)
        self.label.setFont(font)
        self.label.setMouseTracking(True)
        self.label.setToolTip("")
        self.label.setToolTipDuration(4)
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("../../../Downloads/1000329340.png"))
        self.label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label.setObjectName("label")
        self.textEdit_2 = QtWidgets.QTextEdit(parent=logic)
        self.textEdit_2.setGeometry(QtCore.QRect(90, 210, 151, 31))
        self.textEdit_2.setStyleSheet("font: 700 10pt \"Tahoma\";\n"
"\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(59, 102, 140, 175), stop:1 rgba(255, 255, 255, 255));")
        self.textEdit_2.setReadOnly(True)
        self.textEdit_2.setObjectName("textEdit_2")
        self.commandLinkButton = QtWidgets.QCommandLinkButton(parent=logic)
        self.commandLinkButton.setGeometry(QtCore.QRect(220, 340, 121, 41))
        self.commandLinkButton.setStyleSheet("font: 9pt \"Segoe UI\";\n"
"text-decoration: underline;")
        self.commandLinkButton.setObjectName("commandLinkButton")
        self.checkBox = QtWidgets.QCheckBox(parent=logic)
        self.checkBox.setGeometry(QtCore.QRect(490, 220, 51, 16))
        self.checkBox.setStyleSheet("selection-color: rgb(198, 247, 255);\n"
"background-color: rgb(255, 255, 255);")
        self.checkBox.setObjectName("checkBox")

        self.retranslateUi(logic)
        QtCore.QMetaObject.connectSlotsByName(logic)

    def retranslateUi(self, logic):
        _translate = QtCore.QCoreApplication.translate
        logic.setWindowTitle(_translate("logic", "Form"))
        self.pushButton.setText(_translate("logic", "login"))
        self.pushButton_2.setText(_translate("logic", "exit"))
        self.lineEdit.setPlaceholderText(_translate("logic", "enter your name"))
        self.lineEdit_2.setPlaceholderText(_translate("logic", "enter your password"))
        self.textEdit.setHtml(_translate("logic", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'Tahoma\'; font-size:10pt; font-weight:700; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Segoe UI\'; font-weight:696;\">user_name</span></p></body></html>"))
        self.textEdit_2.setHtml(_translate("logic", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'Tahoma\'; font-size:10pt; font-weight:700; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Segoe UI\'; font-weight:696;\">password</span></p></body></html>"))
        self.commandLinkButton.setText(_translate("logic", "forgot pasword"))
        self.checkBox.setWhatsThis(_translate("logic", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'Scheherazade\'; font-size:12pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:700;\">Show</span></p></body></html>"))
        self.checkBox.setText(_translate("logic", "Show"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    logic = QtWidgets.QWidget()
    ui = Ui_logic()
    ui.setupUi(logic)
    logic.show()
    sys.exit(app.exec())